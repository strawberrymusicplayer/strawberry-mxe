diff --git a/CMakeLists.txt b/CMakeLists.txt
index 6b4d4d8..0bfd8d8 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -3,8 +3,22 @@
 #  - Solaris 11.4 SRU 15 : 3.15
 cmake_minimum_required(VERSION 3.15)
 
+include(CheckLibraryExists)
+include(CheckSymbolExists)
+
 project(LIBFAAD2 LANGUAGES C)
 
+# Set a default build type if none was specified
+set(default_build_type "RelWithDebInfo")
+if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
+  message(STATUS "Setting build type to '${default_build_type}' as none was specified.")
+  set(CMAKE_BUILD_TYPE "${default_build_type}" CACHE
+      STRING "Choose the type of build." FORCE)
+  # Set the possible values of build type for cmake-gui
+  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS
+    "Debug" "Release" "MinSizeRel" "RelWithDebInfo")
+endif()
+
 # If FAAD is being bundled in another project, we don't want to
 # install anything. However, we want to let people override this, so
 # we'll use the FAAD_BUNDLED_MODE variable to let them do that; just
@@ -15,12 +29,27 @@ if(NOT DEFINED FAAD_BUNDLED_MODE)
   # depending on whether or not we are the top-level project.
   if(FAAD_PARENT_DIRECTORY)
     set(FAAD_BUNDLED_MODE ON)
+    if(NOT DEFINED BUILD_SHARED_LIBS)
+      set(BUILD_SHARED_LIBS OFF)
+    endif()
   else()
     set(FAAD_BUNDLED_MODE OFF)
+    if(NOT DEFINED BUILD_SHARED_LIBS)
+      set(BUILD_SHARED_LIBS ON)
+    endif()
   endif()
 endif()
 mark_as_advanced(FAAD_BUNDLED_MODE)
 
+if(BUILD_SHARED_LIBS)
+  if(NOT DEFINED CMAKE_C_VISIBILITY_PRESET)
+    set(CMAKE_C_VISIBILITY_PRESET hidden)
+  endif()
+  if (WIN32 AND NOT DEFINED CMAKE_DLL_NAME_WITH_SOVERSION)
+    set(CMAKE_DLL_NAME_WITH_SOVERSION ON)
+  endif()
+endif()
+
 find_library(MATH_LIBRARY m)
 
 include(GNUInstallDirs)
@@ -78,6 +107,18 @@ set(FAAD_DEFINES
   PACKAGE_VERSION=\"${FAAD_VERSION}\"
 )
 
+check_library_exists(m lrintf "" HAVE_LIBM)
+if(HAVE_LIBM)
+  list(APPEND CMAKE_REQUIRED_LIBRARIES m)
+endif()
+
+check_symbol_exists(lrintf "math.h" HAVE_LRINTF)
+if(HAVE_LRINTF)
+  list(APPEND FAAD_DEFINES
+    HAVE_LRINTF=1
+  )
+endif()
+
 set(FAAD_FLAGS
   -Wall
 )
@@ -220,7 +261,7 @@ endif()
 
 # Installation
 
-if(NOT FAAD_BUNDLED_MODE AND NOT MSVC)
+if(NOT FAAD_BUNDLED_MODE)
   install(FILES "${CMAKE_CURRENT_BINARY_DIR}/faad2.pc"
     DESTINATION "${CMAKE_INSTALL_LIBDIR}/pkgconfig")
 
diff --git a/libfaad/common.h b/libfaad/common.h
index da2cd90..4add57f 100644
--- a/libfaad/common.h
+++ b/libfaad/common.h
@@ -323,7 +323,7 @@ char *strchr(), *strrchr();
   #if defined(_WIN32) && defined(_M_IX86) && !defined(__MINGW32__)
     #ifndef HAVE_LRINTF
     #define HAS_LRINTF
-    static INLINE int lrintf(float f)
+    static INLINE long lrintf(float f)
     {
         int i;
         __asm
@@ -339,7 +339,7 @@ char *strchr(), *strrchr();
     #ifndef HAVE_LRINTF
     #define HAS_LRINTF
     // from http://www.stereopsis.com/FPU.html
-    static INLINE int lrintf(float f)
+    static INLINE long lrintf(float f)
     {
         int i;
         __asm__ __volatile__ (
@@ -405,7 +405,7 @@ char *strchr(), *strrchr();
 
 #ifndef HAS_LRINTF
 /* standard cast */
-#define lrintf(f) ((int32_t)(f))
+#define lrintf(f) ((long)(f))
 #endif
 
 typedef real_t complex_t[2];
