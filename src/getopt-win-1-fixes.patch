diff --git a/CMakeLists.txt b/CMakeLists.txt
new file mode 100644
index 0000000..93851da
--- /dev/null
+++ b/CMakeLists.txt
@@ -0,0 +1,91 @@
+cmake_minimum_required(VERSION 3.12)
+
+project(getopt-win
+  VERSION 1.1.0
+  DESCRIPTION "Full getopt port for unicode and multibyte Windows applications"
+  HOMEPAGE_URL "https://github.com/ludvikjerabek/getopt-win"
+  LANGUAGES C
+)
+
+include(GNUInstallDirs)
+
+option(BUILD_SHARED_LIBS "Build the shared library." ON)
+option(BUILD_TESTING "Build the testing tree." ON)
+
+# getopt library
+
+add_library(getopt src/getopt.c)
+target_include_directories(getopt PUBLIC
+  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src>
+  $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}>
+)
+target_compile_definitions(getopt
+  PUBLIC  $<$<NOT:$<BOOL:${BUILD_SHARED_LIBS}>>:STATIC_GETOPT>
+  PRIVATE $<$<BOOL:${BUILD_SHARED_LIBS}>:EXPORTS_GETOPT>
+)
+set_target_properties(getopt PROPERTIES
+  PUBLIC_HEADER src/getopt.h
+  VERSION ${PROJECT_VERSION}
+)
+
+add_library(${PROJECT_NAME}::getopt ALIAS getopt)
+
+# example program
+
+add_executable(example EXCLUDE_FROM_ALL src/main.c)
+target_link_libraries(example PRIVATE getopt)
+
+# testing
+if(BUILD_TESTING)
+  enable_testing()
+
+  add_test(NAME example
+    COMMAND example --add -b -c hello -d 42 --verbose nonopt1 nonopt2
+  )
+  set_tests_properties(example PROPERTIES
+    PASS_REGULAR_EXPRESSION [=[
+option -a
+option -b
+option -c with value `hello'
+option -d with value `42'
+verbose flag is set
+non-option ARGV-elements: nonopt1 nonopt2]=]
+  )
+endif()
+
+# installation
+
+install(TARGETS getopt
+  EXPORT ${PROJECT_NAME}-targets
+  ARCHIVE COMPONENT Library
+  RUNTIME COMPONENT Library
+  PUBLIC_HEADER
+    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}
+    COMPONENT Library
+)
+
+# CMake export/import files
+
+install(EXPORT ${PROJECT_NAME}-targets
+  DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}
+  NAMESPACE ${PROJECT_NAME}::
+  COMPONENT Config
+)
+
+include(CMakePackageConfigHelpers)
+
+configure_package_config_file(${PROJECT_NAME}-config.cmake.in
+  ${PROJECT_NAME}-config.cmake
+  INSTALL_DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}
+)
+write_basic_package_version_file(
+  ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config-version.cmake
+  COMPATIBILITY SameMajorVersion
+)
+
+install(FILES
+  ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config.cmake
+  ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config-version.cmake
+  DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}
+  COMPONENT Config
+)
diff --git a/getopt-win-config.cmake.in b/getopt-win-config.cmake.in
new file mode 100644
index 0000000..73db5da
--- /dev/null
+++ b/getopt-win-config.cmake.in
@@ -0,0 +1,5 @@
+@PACKAGE_INIT@
+
+include("${CMAKE_CURRENT_LIST_DIR}/getopt-win-targets.cmake")
+
+check_required_components(getopt-win)
diff --git a/src/main.c b/src/main.c
new file mode 100644
index 0000000..c205a8b
--- /dev/null
+++ b/src/main.c
@@ -0,0 +1,109 @@
+/*
+Date: 02/03/2011 - Ludvik Jerabek - Initial Release
+Version: 1.1
+Comment: Sample Application using Getopt for Microsoft C\C++
+License: LGPL
+
+Revisions:
+
+02/03/2011 - Ludvik Jerabek - Initial Release
+
+**DISCLAIMER**
+THIS MATERIAL IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,
+EITHER EXPRESS OR IMPLIED, INCLUDING, BUT Not LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
+PURPOSE, OR NON-INFRINGEMENT. SOME JURISDICTIONS DO NOT ALLOW THE
+EXCLUSION OF IMPLIED WARRANTIES, SO THE ABOVE EXCLUSION MAY NOT
+APPLY TO YOU. IN NO EVENT WILL I BE LIABLE TO ANY PARTY FOR ANY
+DIRECT, INDIRECT, SPECIAL OR OTHER CONSEQUENTIAL DAMAGES FOR ANY
+USE OF THIS MATERIAL INCLUDING, WITHOUT LIMITATION, ANY LOST
+PROFITS, BUSINESS INTERRUPTION, LOSS OF PROGRAMS OR OTHER DATA ON
+YOUR INFORMATION HANDLING SYSTEM OR OTHERWISE, EVEN If WE ARE
+EXPRESSLY ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
+*/
+
+#include <stdio.h>
+#include <stdlib.h>
+#include "getopt.h"
+#include <tchar.h>
+
+int _tmain(int argc, TCHAR** argv)
+{
+	static int verbose_flag;
+	int c;
+
+	while (1)
+	{
+		static struct option long_options[] =
+		{
+			{_T("verbose"), ARG_NONE, &verbose_flag, 1},
+			{_T("brief"),   ARG_NONE, &verbose_flag, 0},
+			{_T("add"),     ARG_NONE, 0, _T('a')},
+			{_T("append"),  ARG_NONE, 0, _T('b')},
+			{_T("delete"),  ARG_REQ,  0, _T('d')},
+			{_T("create"),  ARG_REQ,  0, _T('c')},
+			{_T("file"),    ARG_REQ, 0 , _T('f')},
+			{ ARG_NULL , ARG_NULL , ARG_NULL , ARG_NULL }
+		};
+
+		int option_index = 0;
+		c = getopt_long(argc, argv, _T("abc:d:f:"), long_options, &option_index);
+
+		// Check for end of operation or error
+		if (c == -1)
+			break;
+
+		// Handle options
+		switch (c)
+		{
+		case 0:
+			/* If this option set a flag, do nothing else now. */
+			if (long_options[option_index].flag != 0)
+				break;
+			_tprintf (_T("option %s"), long_options[option_index].name);
+			if (optarg)
+				_tprintf (_T(" with arg %s"), optarg);
+			_tprintf (_T("\n"));
+			break;
+
+		case _T('a'):
+			_tprintf(_T("option -a\n"));
+			break;
+
+		case _T('b'):
+			_tprintf(_T("option -b\n"));
+			break;
+
+		case _T('c'):
+			_tprintf (_T("option -c with value `%s'\n"), optarg);
+			break;
+
+		case _T('d'):
+			_tprintf (_T("option -d with value `%s'\n"), optarg);
+			break;
+
+		case _T('f'):
+			_tprintf (_T("option -f with value `%s'\n"), optarg);
+			break;
+
+		case _T('?'):
+			/* getopt_long already printed an error message. */
+			break;
+
+		default:
+			abort();
+		}
+	}
+
+	if (verbose_flag)
+		_tprintf (_T("verbose flag is set\n"));
+
+
+	if (optind < argc)
+	{
+		_tprintf (_T("non-option ARGV-elements: "));
+		while (optind < argc) _tprintf (_T("%s "), argv[optind++]);
+		_tprintf (_T("\n"));
+	}
+	return 0;
+}
