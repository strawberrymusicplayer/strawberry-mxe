diff --git a/input.c b/input.c
index e6a39e2..02ae9fe 100644
--- a/input.c
+++ b/input.c
@@ -179,6 +179,14 @@ static int pop_index, push_index;
 static unsigned char ibuffer[512];
 static int ibuffer_len = sizeof (ibuffer) - 1;
 
+#if defined (__MINGW32__)
+#include <windows.h>
+static int _win32_getch (void);
+static int _win32_kbhit (void);
+static char _win32_buf[16] = {'0'};
+static int _win32_bufidx = 0;
+#endif
+
 #define any_typein (push_index != pop_index)
 
 int
@@ -190,7 +198,11 @@ _rl_any_typein (void)
 int
 _rl_pushed_input_available (void)
 {
-  return (push_index != pop_index);
+  return (push_index != pop_index)
+#if defined (__MINGW32__)
+    || _win32_bufidx > 0
+#endif
+    ;
 }
 
 /* Return the amount of space available in the buffer for stuffing
@@ -326,7 +338,7 @@ rl_gather_tyi (void)
      that we read it normally. */
    if (result == -1)
      {
-       chars_avail = isatty (tty) ? _kbhit () : 0;
+       chars_avail = isatty (tty) ? _win32_kbhit () : 0;
        result = 0;
      }
 #endif
@@ -425,7 +437,7 @@ _rl_input_available (void)
 
 #if defined (__MINGW32__)
   if (isatty (tty))
-    return (_kbhit ());
+    return (_win32_kbhit ());
 #endif
 
   return 0;
@@ -829,6 +841,139 @@ rl_read_key (void)
   return (c);
 }
 
+#if defined (__MINGW32__)
+#define _WIN32_READ_NOCHAR (-2)
+
+static int
+_win32_getch_internal (int block)
+{
+  INPUT_RECORD rec;
+  DWORD evRead, waitResult;
+  HANDLE hInput = (HANDLE) _get_osfhandle (fileno (rl_instream));
+
+  if (_win32_bufidx > 0)
+    return _win32_buf[--_win32_bufidx];
+
+  hInput = (HANDLE) _get_osfhandle (fileno (rl_instream));
+
+  do
+    {
+      if (! block)
+        {
+          if (WaitForSingleObject (hInput, _keyboard_input_timeout/1000) != WAIT_OBJECT_0)
+            return _WIN32_READ_NOCHAR;
+        }
+
+      if (! ReadConsoleInputW (hInput, &rec, 1, &evRead) || evRead != 1)
+        return EOF;
+
+      switch (rec.EventType)
+        {
+          case KEY_EVENT:
+            if ((rec.Event.KeyEvent.bKeyDown &&
+               (rec.Event.KeyEvent.wVirtualKeyCode < VK_SHIFT ||
+                rec.Event.KeyEvent.wVirtualKeyCode > VK_MENU)) ||
+               (!rec.Event.KeyEvent.bKeyDown &&
+                rec.Event.KeyEvent.wVirtualKeyCode == VK_MENU &&
+                rec.Event.KeyEvent.uChar.UnicodeChar))
+              {
+                if (rec.Event.KeyEvent.uChar.UnicodeChar)
+                  {
+                    int result = (int) rec.Event.KeyEvent.uChar.UnicodeChar;
+                    char charbuf[5] = {0};
+                    wchar_t unicode[2] = {result, 0};
+                    int utf16_code_units = 1;
+                    if ((unicode[0] & 0xF800) == 0xD800)  /* outside BMP */
+                      {
+                        ReadConsoleInputW (hInput, &rec, 1, &evRead);
+                        unicode[1] = (int) rec.Event.KeyEvent.uChar.UnicodeChar;
+                        utf16_code_units++;
+                      }
+                    /* convert to current codepage or UTF-8 byte sequence */
+                    unsigned int codepage = CP_THREAD_ACP;
+                    if (_rl_utf8locale)
+                      codepage = CP_UTF8;
+                    int len = WideCharToMultiByte (codepage, 0,
+                                                   (wchar_t *) &unicode, utf16_code_units,
+                                                   charbuf, 5, NULL, NULL);
+                    /* buffer is read from back to front */
+                    for (int i=0; i<len-1; i++)
+                      _win32_buf[_win32_bufidx++] = (unsigned char) charbuf[len-i-1];
+
+                    return (int) (unsigned char) charbuf[0];
+                  }
+
+                switch (rec.Event.KeyEvent.wVirtualKeyCode)
+                  {
+                    /* buffer is read from back to front */
+                    case VK_UP:
+                      _win32_buf[_win32_bufidx++] = 'A';
+                      _win32_buf[_win32_bufidx++] = '[';
+                      return 0x1b;  /* ESC */
+                    case VK_DOWN:
+                      _win32_buf[_win32_bufidx++] = 'B';
+                      _win32_buf[_win32_bufidx++] = '[';
+                      return 0x1b;  /* ESC */
+                    case VK_RIGHT:
+                      _win32_buf[_win32_bufidx++] = 'C';
+                      _win32_buf[_win32_bufidx++] = '[';
+                      return 0x1b;  /* ESC */
+                    case VK_LEFT:
+                      _win32_buf[_win32_bufidx++] = 'D';
+                      _win32_buf[_win32_bufidx++] = '[';
+                      return 0x1b;  /* ESC */
+                    case VK_HOME:
+                      _win32_buf[_win32_bufidx++] = 'H';
+                      _win32_buf[_win32_bufidx++] = '[';
+                      return 0x1b;  /* ESC */
+                    case VK_END:
+                      _win32_buf[_win32_bufidx++] = 'F';
+                      _win32_buf[_win32_bufidx++] = '[';
+                      return 0x1b;  /* ESC */
+                    case VK_DELETE:
+                      _win32_buf[_win32_bufidx++] = 8;
+                      _win32_buf[_win32_bufidx++] = 'C';
+                      _win32_buf[_win32_bufidx++] = '[';
+                      return 0x1b;  /* ESC */
+                    default:
+                      break;
+                  }
+              }
+            break;
+
+          case WINDOW_BUFFER_SIZE_EVENT:
+            rl_resize_terminal ();
+            break;
+
+          default:
+            break;
+        }
+    }
+  while (1);
+}
+
+static int 
+_win32_kbhit (void)
+{
+  int result;
+
+  result = _win32_getch_internal (0);
+  if (result == _WIN32_READ_NOCHAR
+      || result == EOF)
+    return 0;
+
+  _win32_buf[_win32_bufidx++] = result;
+
+  return _win32_bufidx;
+}
+
+static int
+_win32_getch (void)
+{
+  return (_win32_getch_internal (1));
+}
+#endif
+
 int
 rl_getc (FILE *stream)
 {
@@ -863,7 +1008,7 @@ rl_getc (FILE *stream)
 
 #if defined (__MINGW32__)
       if (isatty (fd))
-	return (_getch ());	/* "There is no error return." */
+        return (_win32_getch ());
 #endif
       result = 0;
 #if defined (HAVE_PSELECT) || defined (HAVE_SELECT)
diff --git a/nls.c b/nls.c
index e04991d..e9642f5 100644
--- a/nls.c
+++ b/nls.c
@@ -49,6 +49,11 @@
 
 #include <ctype.h>
 
+#if defined (_WIN32)
+#  include <windows.h>
+#  include <versionhelpers.h>
+#endif
+
 #include "rldefs.h"
 #include "readline.h"
 #include "rlshell.h"
@@ -108,7 +113,11 @@ utf8locale (char *lspec)
 {
   char *cp;
 
-#if HAVE_LANGINFO_CODESET
+#if defined (_WIN32)
+  /* On Windows, the relevant "locale" is the selected codepage of the used
+     console. */
+  return (IsWindows7OrGreater () && (GetConsoleCP () == 65001));
+#elif HAVE_LANGINFO_CODESET
   cp = nl_langinfo (CODESET);
   return (STREQ (cp, "UTF-8") || STREQ (cp, "utf8"));
 #else
@@ -139,11 +148,18 @@ _rl_init_locale (void)
 #if defined (HAVE_SETLOCALE)
   if (lspec == 0 || *lspec == 0)
     lspec = setlocale (LC_CTYPE, (char *)NULL);
+#if defined (_WIN32)
+  /* Setting an UTF-8 locale is not a no-op on Windows.  Instead the
+     information about the locale is lost.  Use whatever we got at this
+     point. */
+  ret = lspec;
+#else
   if (lspec == 0)
     lspec = "";
   ret = setlocale (LC_CTYPE, lspec);	/* ok, since it does not change locale */
   if (ret == 0 || *ret == 0)
     ret = setlocale (LC_CTYPE, (char *)NULL);
+#endif
   if (ret == 0 || *ret == 0)
     ret = RL_DEFAULT_LOCALE;
 #else
diff --git a/readline.c b/readline.c
index 33b6c13..ece5026 100644
--- a/readline.c
+++ b/readline.c
@@ -1215,7 +1215,12 @@ rl_initialize (void)
       RL_SETSTATE(RL_STATE_INITIALIZED);
     }
   else
-    _rl_reset_locale ();	/* check current locale and set locale variables */
+    {
+      _rl_reset_locale ();	/* check current locale and set locale variables */
+#if defined (__MINGW32__)
+      rl_reset_screen_size ();
+#endif      
+    }
 
   /* Initialize the current line information. */
   _rl_init_line_state ();
diff --git a/rlwinsize.h b/rlwinsize.h
index eaf7fbf..6ff3802 100644
--- a/rlwinsize.h
+++ b/rlwinsize.h
@@ -55,6 +55,10 @@
 #  define tcflow(fd, action)	ioctl(fd, TCXONC, action)
 #endif
 
+#if defined (__MINGW32__)
+struct winsize {};
+#endif
+
 extern int _rl_tcgetwinsize (int, struct winsize *);
 extern void _rl_tcsetwinsize (int, struct winsize *);
 
diff --git a/signals.c b/signals.c
index 5a070d7..6e9b4fa 100644
--- a/signals.c
+++ b/signals.c
@@ -46,6 +46,11 @@
 
 #include "rlprivate.h"
 
+#if defined (__MINGW32__)
+#  define WIN32_LEAN_AND_MEAN
+#  include <windows.h>
+#endif
+
 #if defined (HANDLE_SIGNALS)
 
 #define SIGHANDLER_RETURN return
@@ -80,7 +85,7 @@ static void _rl_handle_signal (int);
 int rl_catch_signals = 1;
 
 /* If non-zero, readline will install a signal handler for SIGWINCH. */
-#ifdef SIGWINCH
+#if defined (SIGWINCH) || defined(__MINGW32__)
 int rl_catch_sigwinch = 1;
 #else
 int rl_catch_sigwinch = 0;	/* for the readline state struct in readline.c */
@@ -515,6 +520,21 @@ rl_set_signals (void)
     }
 #endif /* SIGWINCH */
 
+#if defined (__MINGW32__)
+  if (rl_catch_sigwinch && sigwinch_set_flag == 0)
+    {
+      DWORD mode;
+      HANDLE hStdIn = GetStdHandle (STD_INPUT_HANDLE);
+
+      if (GetConsoleMode (hStdIn, &mode))
+        {
+          mode |= ENABLE_WINDOW_INPUT;
+          if (SetConsoleMode (hStdIn, mode))
+            sigwinch_set_flag = 1;
+        }
+    }
+#endif
+
   return 0;
 }
 
@@ -565,6 +585,20 @@ rl_clear_signals (void)
       sigwinch_set_flag = 0;
     }
 #endif
+#if defined (__MINGW32__)
+  if (rl_catch_sigwinch && sigwinch_set_flag == 1)
+    {
+      DWORD mode;
+      HANDLE hStdIn = GetStdHandle (STD_INPUT_HANDLE);
+
+      if (GetConsoleMode (hStdIn, &mode))
+        {
+          mode &= ~ENABLE_WINDOW_INPUT;
+          if (SetConsoleMode (hStdIn, mode))
+            sigwinch_set_flag = 0;
+        }
+    }
+#endif
 
   return 0;
 }
